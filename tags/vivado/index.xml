<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Vivado on Jack Bonnell - C++ Programmer</title><link>https://jackbonnelldevelopment.github.io/tags/vivado/</link><description>Recent content in Vivado on Jack Bonnell - C++ Programmer</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Thu, 07 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://jackbonnelldevelopment.github.io/tags/vivado/index.xml" rel="self" type="application/rss+xml"/><item><title>Life: Device Tree Overlays, JTag Development Flows and Validation Testing</title><link>https://jackbonnelldevelopment.github.io/blog/life-device-tree-overlays-jtag-development-flows-and-validation-testing/</link><pubDate>Thu, 07 Oct 2021 00:00:00 +0000</pubDate><guid>https://jackbonnelldevelopment.github.io/blog/life-device-tree-overlays-jtag-development-flows-and-validation-testing/</guid><description>Life: Device Tree Overlays, JTag Development Flows and Validation Testing This week, I&amp;rsquo;ve been working on creating a more efficient Workflow for myself regarding mocking up block designs and Vitis applications, along with trying to brush up on my simulation testing in Vivado.
Device Tree Overlays With my current workflow structure, I do not come across Device tree overlays very often as usually, the PetaLinux build is bespoke to the task at hand.</description></item></channel></rss>